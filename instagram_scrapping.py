# -*- coding: utf-8 -*-
"""Instagram scrapping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sqYxOw_TEIgd3uvhGnD-XgHjDfSoK1PT
"""

pip install instaloader

import instaloader
import pandas as pd
import time
import random

# Initialize an Instaloader object
L = instaloader.Instaloader()

# Load session using sessionid cookie
#sessionid = '11163875055271%3AZZUb4BhKfGPoXH%3A6%3AAYe3jwZEFmLqYVySOy13iT9u4wiRbWoViUZMlv4J3A'  # Replace with your actual sessionid cookie
sessionid = 'YOUR_SESSION_ID"
L.context._session.cookies.set('sessionid', sessionid)

# Verify login status
try:
    profile = instaloader.Profile.from_username(L.context, 'instagram')  # Check login with Instagram's profile
    print("Successfully logged in.")
except instaloader.exceptions.LoginRequiredException:
    print("Login required. Please check your sessionid.")
    exit()

# Specify the Instagram profile you want to scrape
profile_name = 'amaramuzik_bengali'  # Replace with the actual profile name

# Load the profile
profile = instaloader.Profile.from_username(L.context, profile_name)

# Create an empty DataFrame to store the results
df = pd.DataFrame(columns=['Post URL', 'Date', 'Caption', 'Likes', 'Comments', 'Views'])

# Function to handle exponential backoff
def exponential_backoff(attempt):
    delay = min(2 ** attempt + random.uniform(0, 1), 64)
    print(f"Rate limited. Waiting for {delay:.2f} seconds before retrying...")
    time.sleep(delay)

# Iterate over the posts of the profile
for post in profile.get_posts():
    attempt = 0
    success = False

    while not success and attempt < 10:
        try:
            post_url = f"https://www.instagram.com/p/{post.shortcode}/"
            post_date = post.date
            post_caption = post.caption
            post_likes = post.likes
            post_comments = post.comments
            post_views = post.video_view_count if post.is_video else None

            # Add the data to the DataFrame
            new_row = pd.DataFrame([{
                'Post URL': post_url,
                'Date': post_date,
                'Caption': post_caption,
                'Likes': post_likes,
                'Comments': post_comments,
                'Views': post_views
            }])`
            df = pd.concat([df, new_row], ignore_index=True)

            # Print the data for verification
            print(f"Post URL: {post_url}")
            print(f"Date: {post_date}")
            print(f"Caption: {post_caption}")
            print(f"Likes: {post_likes}")
            print(f"Comments: {post_comments}")
            if post.is_video:
                print(f"Video Views: {post_views}")
            print('-' * 40)

            # Wait for 5 seconds before the next request
            time.sleep(5)
            success = True

        except instaloader.exceptions.ConnectionException as e:
            print(f"An error occurred: {e}")
            exponential_backoff(attempt)
            attempt += 1
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            break

# Save the DataFrame to a CSV file
df.to_csv('instagram_posts.csv', index=False)

print("Data saved to instagram_posts.csv")

df

# Save the DataFrame to a CSV file
df.to_excel('instagram_posts.xlsx', index=False)

